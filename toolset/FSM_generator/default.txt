module moore_regular_template
#( parameter
        param1 : <value>,
        param2 : <value>
)
(
    input wire clk, reset,
    input wire [<size>] input1, input2, ...,
    output reg [<size>] output1, output2
);

localparam [<size_state>]
    s0 = 0,
    s1 = 1,
    s2 = 2,

    reg[<size_state>] state_reg, state_next;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        state_reg <= s1;
    end
    else begin
        state_reg <= state_next;
    end
end

always @(input1, input2, state_reg) begin
    state_next = state_reg;
    case (state_reg)
        s0 : begin
            if (<condition>) begin  n
                state_next = s1;
            end
            else if (<condition>) begin
                state_next = ...;
            end
            else begin
                state_next = s0;
            end
        end
        s1 : begin
            if (<condition>) begin
                state_next = s2;
            end
            else if (<condition>) begin
                state_next = ...;
            end
            else begin// remain in current state
                state_next = s1;
            end
        end
        s2 : begin
            ...
        end
    endcase
end

always @(input1, input2, ..., state_reg) begin

    output1 = <value>;
    output2 = <value>;
    ...
    case (state_reg)
        s0 : begin
            output1 = <value>;
            output2 = <value>;
            ...
        end
        s1 : begin
            output1 = <value>;
            output2 = <value>;
            ...
        end
        s2 : begin
            ...
        end
    endcase
end

always @(posedge clk, posedge reset)
begin
    if (reset) begin
        new_output1 <= ... ;
        new_output2 <= ... ;
    end
    else begin
        new_output1 <= output1;
        new_output2 <= output2;
    end
end

endmodule